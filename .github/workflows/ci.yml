name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, terragon/* ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.9'
  CUDA_VERSION: '12.0'

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy
          pip install -e ".[dev]"
      
      - name: Code formatting (Black)
        run: black --check --diff src/ tests/ examples/
      
      - name: Import sorting (isort)
        run: isort --check-only --diff src/ tests/ examples/
      
      - name: Linting (flake8)
        run: flake8 src/ tests/ examples/
      
      - name: Type checking (mypy)
        run: mypy src/photonic_flash_attention
        continue-on-error: true

  test-unit:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xvfb
          pip install -e ".[dev]"
      
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=src/photonic_flash_attention --cov-report=xml
        env:
          PHOTONIC_SIMULATION: '1'
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        with:
          file: ./coverage.xml
          flags: unittests

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -e ".[dev,benchmark]"
      
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v
        env:
          PHOTONIC_SIMULATION: '1'
      
      - name: Run performance tests
        run: |
          pytest tests/performance/ -v
        env:
          PHOTONIC_SIMULATION: '1'

  test-security:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep
          pip install -e ".[dev]"
      
      - name: Security analysis (Bandit)
        run: bandit -r src/ -f json -o bandit-report.json || true
      
      - name: Dependency security check (Safety)
        run: safety check --json --output safety-report.json || true
      
      - name: Static security analysis (Semgrep)
        run: |
          python -m semgrep --config=auto --json --output=semgrep-report.json src/ || true
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test-unit]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,benchmark]"
      
      - name: Run benchmarks
        run: |
          python -m photonic_flash_attention.cli benchmark \
            --seq-lengths 128 256 512 1024 \
            --batch-sizes 1 2 4 \
            --num-iterations 5 \
            --output benchmark-results.json
        env:
          PHOTONIC_SIMULATION: '1'
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json
      
      - name: Performance regression check
        run: |
          python scripts/check_performance_regression.py benchmark-results.json
        continue-on-error: true

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme
          pip install -e ".[dev]"
      
      - name: Build documentation
        run: |
          cd docs
          make html
      
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test-unit]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: terragonlabs/photonic-flash-attention
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, benchmark, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          # Would deploy to actual staging environment
          echo "Deployment simulated successfully"
      
      - name: Run smoke tests
        run: |
          echo "ðŸ§ª Running smoke tests..."
          # Would run actual smoke tests against staging
          echo "Smoke tests passed"
      
      - name: Notify deployment
        run: |
          echo "ðŸ“¢ Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, benchmark, docker-build, test-security]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production environment..."
          # Would deploy to actual production environment
          echo "Production deployment simulated successfully"
      
      - name: Run production smoke tests
        run: |
          echo "ðŸ§ª Running production smoke tests..."
          # Would run actual smoke tests against production
          echo "Production smoke tests passed"
      
      - name: Update monitoring
        run: |
          echo "ðŸ“Š Updating monitoring dashboards..."
          # Would update monitoring for new version
          echo "Monitoring updated"
      
      - name: Notify stakeholders
        run: |
          echo "ðŸ“¢ Production deployment completed"
          echo "Version: ${{ github.event.release.tag_name }}"

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Cleanup artifacts
        run: |
          echo "ðŸ§¹ Cleaning up temporary resources..."
          # Would clean up any temporary resources
          echo "Cleanup completed"