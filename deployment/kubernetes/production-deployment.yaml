# Kubernetes production deployment for Photonic Flash Attention
apiVersion: apps/v1
kind: Deployment
metadata:
  name: photonic-flash-attention
  namespace: photonic
  labels:
    app: photonic-flash-attention
    version: v1.0.0
    tier: compute
    component: ml-inference
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  
  selector:
    matchLabels:
      app: photonic-flash-attention
  
  template:
    metadata:
      labels:
        app: photonic-flash-attention
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Node selection
      nodeSelector:
        node-type: gpu-compute
        photonic-capable: "true"
      
      # Tolerations for specialized nodes
      tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"
      - key: "photonic-compute"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      # Service account
      serviceAccountName: photonic-service-account
      
      # Init containers
      initContainers:
      - name: system-check
        image: photonic-flash-attention:production
        command: ['python', '/app/healthcheck.py']
        env:
        - name: HEALTH_CHECK_VERBOSE
          value: "true"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      containers:
      - name: photonic-attention
        image: photonic-flash-attention:production
        imagePullPolicy: Always
        
        # Resource requirements
        resources:
          requests:
            cpu: "2000m"
            memory: "4Gi"
            nvidia.com/gpu: 1
            ephemeral-storage: "1Gi"
          limits:
            cpu: "4000m"
            memory: "8Gi"
            nvidia.com/gpu: 1
            ephemeral-storage: "2Gi"
        
        # Environment configuration
        env:
        - name: PHOTONIC_MODE
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: ENABLE_TELEMETRY
          value: "true"
        - name: THERMAL_MONITORING
          value: "true"
        - name: ENERGY_OPTIMIZATION
          value: "true"
        - name: CARBON_TRACKING
          value: "true"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Ports
        ports:
        - name: http-metrics
          containerPort: 8080
          protocol: TCP
        
        # Health checks
        livenessProbe:
          exec:
            command:
            - python
            - /app/healthcheck.py
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - python
            - /app/healthcheck.py
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        startupProbe:
          exec:
            command:
            - python
            - /app/healthcheck.py
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        
        # Volume mounts
        volumeMounts:
        - name: photonic-data
          mountPath: /app/data
        - name: photonic-logs
          mountPath: /app/logs
        - name: photonic-models
          mountPath: /app/models
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
        - name: thermal-sensors
          mountPath: /sys/class/thermal
          readOnly: true
        
        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                echo "Graceful shutdown initiated"
                sleep 15
      
      # Volumes
      volumes:
      - name: photonic-data
        persistentVolumeClaim:
          claimName: photonic-data-pvc
      - name: photonic-logs
        persistentVolumeClaim:
          claimName: photonic-logs-pvc
      - name: photonic-models
        persistentVolumeClaim:
          claimName: photonic-models-pvc
      - name: tmp-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: cache-volume
        emptyDir:
          sizeLimit: 2Gi
      - name: thermal-sensors
        hostPath:
          path: /sys/class/thermal
          type: Directory
      
      # Graceful termination
      terminationGracePeriodSeconds: 30
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      
      # Restart policy
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: photonic-flash-attention-service
  namespace: photonic
  labels:
    app: photonic-flash-attention
spec:
  type: ClusterIP
  ports:
  - name: http-metrics
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: photonic-flash-attention

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: photonic-service-account
  namespace: photonic
  labels:
    app: photonic-flash-attention

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: photonic
  name: photonic-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: photonic-role-binding
  namespace: photonic
subjects:
- kind: ServiceAccount
  name: photonic-service-account
  namespace: photonic
roleRef:
  kind: Role
  name: photonic-role
  apiGroup: rbac.authorization.k8s.io

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: photonic-data-pvc
  namespace: photonic
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: photonic-logs-pvc
  namespace: photonic
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: standard
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: photonic-models-pvc
  namespace: photonic
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 20Gi

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: photonic-flash-attention-hpa
  namespace: photonic
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: photonic-flash-attention
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: photonic-flash-attention-pdb
  namespace: photonic
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: photonic-flash-attention

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: photonic-network-policy
  namespace: photonic
spec:
  podSelector:
    matchLabels:
      app: photonic-flash-attention
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - namespaceSelector:
        matchLabels:
          name: photonic
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - {} # Allow all egress traffic