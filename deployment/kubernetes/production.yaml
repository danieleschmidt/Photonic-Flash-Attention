# Kubernetes production deployment for Photonic Flash Attention
apiVersion: v1
kind: Namespace
metadata:
  name: photonic-flash-attention
  labels:
    app.kubernetes.io/name: photonic-flash-attention
    app.kubernetes.io/version: "1.0.0"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: photonic-config
  namespace: photonic-flash-attention
  labels:
    app.kubernetes.io/component: config
data:
  production.json: |
    {
      "environment": "production",
      "photonic_config": {
        "auto_device_selection": true,
        "photonic_threshold": 512,
        "max_optical_power": 10e-3,
        "wavelengths": 80,
        "modulator_resolution": 8
      },
      "performance_config": {
        "enable_caching": true,
        "cache_size_mb": 2048,
        "max_batch_size": 64,
        "enable_autotuning": true
      },
      "monitoring_config": {
        "enable_health_monitoring": true,
        "health_check_interval": 15.0,
        "enable_performance_metrics": true
      }
    }

---
apiVersion: v1
kind: Secret
metadata:
  name: photonic-secrets
  namespace: photonic-flash-attention
  labels:
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  api-key: "your-api-key-here"
  jwt-secret: "your-jwt-secret-here"
  encryption-key: "your-encryption-key-here"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: photonic-cache-pvc
  namespace: photonic-flash-attention
  labels:
    app.kubernetes.io/component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: photonic-logs-pvc
  namespace: photonic-flash-attention
  labels:
    app.kubernetes.io/component: storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: photonic-flash-attention
  namespace: photonic-flash-attention
  labels:
    app.kubernetes.io/name: photonic-flash-attention
    app.kubernetes.io/component: server
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: photonic-flash-attention
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: photonic-flash-attention
        app.kubernetes.io/component: server
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: photonic-server
        image: photonic-flash-attention:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: PHOTONIC_CONFIG_FILE
          value: "/app/config/production.json"
        - name: PHOTONIC_LOG_LEVEL
          value: "INFO"
        - name: PHOTONIC_LOG_FILE
          value: "/app/logs/photonic.log"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: NVIDIA_VISIBLE_DEVICES
          value: "all"
        - name: NVIDIA_DRIVER_CAPABILITIES
          value: "compute,utility"
        resources:
          requests:
            cpu: "2"
            memory: "8Gi"
            nvidia.com/gpu: "1"
          limits:
            cpu: "4"
            memory: "16Gi"
            nvidia.com/gpu: "1"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: cache-volume
          mountPath: /app/cache
        - name: logs-volume
          mountPath: /app/logs
        - name: secrets-volume
          mountPath: /app/secrets
          readOnly: true
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: config-volume
        configMap:
          name: photonic-config
      - name: cache-volume
        persistentVolumeClaim:
          claimName: photonic-cache-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: photonic-logs-pvc
      - name: secrets-volume
        secret:
          secretName: photonic-secrets
      nodeSelector:
        accelerator: nvidia-tesla-v100
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - photonic-flash-attention
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: photonic-service
  namespace: photonic-flash-attention
  labels:
    app.kubernetes.io/name: photonic-flash-attention
    app.kubernetes.io/component: service
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app.kubernetes.io/name: photonic-flash-attention
    app.kubernetes.io/component: server

---
apiVersion: v1
kind: Service
metadata:
  name: photonic-headless
  namespace: photonic-flash-attention
  labels:
    app.kubernetes.io/name: photonic-flash-attention
    app.kubernetes.io/component: headless
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app.kubernetes.io/name: photonic-flash-attention
    app.kubernetes.io/component: server

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: photonic-ingress
  namespace: photonic-flash-attention
  labels:
    app.kubernetes.io/name: photonic-flash-attention
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - photonic-api.example.com
    secretName: photonic-tls
  rules:
  - host: photonic-api.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: photonic-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: photonic-hpa
  namespace: photonic-flash-attention
  labels:
    app.kubernetes.io/name: photonic-flash-attention
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: photonic-flash-attention
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: photonic_requests_per_second
      target:
        type: AverageValue
        averageValue: "50"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: photonic-pdb
  namespace: photonic-flash-attention
  labels:
    app.kubernetes.io/name: photonic-flash-attention
    app.kubernetes.io/component: pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: photonic-flash-attention
      app.kubernetes.io/component: server

---
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: photonic-monitor
  namespace: photonic-flash-attention
  labels:
    app.kubernetes.io/name: photonic-flash-attention
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: photonic-flash-attention
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics